# Import Libraries
import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import Lasso
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import RandomizedSearchCV

# Read CSV 
df = pd.read_csv('rental_info.csv')
df.head()

# Convert Column to Datetime
df['return_date'] = pd.to_datetime(df['return_date'])
df['rental_date'] = pd.to_datetime(df['rental_date'])

# Create Calculated Field Column 
df['rental_length_days'] = df['return_date'] - df['rental_date']
df['rental_length'] = df['rental_length_days'].dt.days

# Remove Column 
df.drop('rental_length_days',axis=1,inplace=True)

# Create Deleted Scenes Column 
df['deleted_scenes'] = np.where(df['special_features'].str.contains('Deleted Scenes'),1,0)

#c= Create Behind the Scenes Column 
df['Behind the Scenes'] = np.where(df['special_features'].str.contains('Behind the Scenes'),1,0)

df.rename(columns = {'Behind the Scenes': 'behind_the_scenes'},inplace=True)

# Drop Columns for Model 
drop_columns = ['rental_date','return_date','special_features','rental_length']

# Assigning X and Y
x = df.drop(drop_columns,axis=1)
y = df['rental_length']

# Train Test Split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=9)

# Lasso Model
lasso = Lasso(alpha=0.3,random_state=9)

# Train Model
lasso.fit(x_train, y_train)
lasso_coef = lasso.coef_

# Perform with Positive Coefficients
X_lasso_train, X_lasso_test = x_train.iloc[:, lasso_coef > 0], x_test.iloc[:, lasso_coef > 0]

# Run OLS Models on Lasso Chosen Regression
ols = LinearRegression()
ols = ols.fit(X_lasso_train, y_train)
y_test_pred = ols.predict(X_lasso_test)
mse_lin_reg_lasso = mean_squared_error(y_test, y_test_pred)

# Random Forest Hyperparameter Space
param_dist = {'n_estimators': np.arange(1,101,1),
          'max_depth':np.arange(1,11,1)}

# Create Random Forest Regressor
rf = RandomForestRegressor()

# Use Random Search to Find Best Hyperparameters
rand_search = RandomizedSearchCV(rf, 
                                 param_distributions=param_dist, 
                                 cv=5, 
                                 random_state=9)

# Fit the Random Search Object
rand_search.fit(x_train, y_train)

# Create Variable for Best Hyper Param
hyper_params = rand_search.best_params_

# Run Random Forest on Chosen Hyper Parameters
rf = RandomForestRegressor(n_estimators=hyper_params["n_estimators"], 
                           max_depth=hyper_params["max_depth"], 
                           random_state=9)
rf.fit(x_train,y_train)
rf_pred = rf.predict(x_test)
mse_random_forest= mean_squared_error(y_test, rf_pred)

# Random Forest Gives Lowest MSE:
best_model = rf
best_mse = mse_random_forest
