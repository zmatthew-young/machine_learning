# Create X 
X = sales_df["radio"].values

# Create y 
y = sales_df["sales"].values

# Reshape X
X = X.reshape(-1, 1)

# Check Shape
print(X.shape, y.shape)

# Import LinearRegression
from sklearn.linear_model import LinearRegression

# Create Model
model = LinearRegression()

# Fit Model
model.fit(X,y)

# Make Predictions
predictions = model.predict(X)

print(predictions[:5])



# Import matplotlib.pyplot
import matplotlib.pyplot as plt

# Create Scatter Plot
plt.scatter(X, y, color="blue")

# Create Line Plot
plt.plot(X, predictions, color="red")
plt.xlabel("Radio Expenditure ($)")
plt.ylabel("Sales ($)")

plt.show()



# Create X and y Arrays
X = sales_df.drop("sales", axis=1).values
y = sales_df["sales"].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Instantiate Model
model = LinearRegression()

# Fit Model
model.fit(X_train, y_train)

# Predictions
y_pred = reg.predict(X_test)
print("Predictions: {}, Actual Values: {}".format(y_pred[:2], y_test[:2]))

# Import mean_squared_error
from sklearn.metrics import mean_squared_error

# Compute R-squared
r_squared = model.score(X_test, y_test)

# Compute RMSE
rmse = mean_squared_error(y_test, y_pred, squared=False)

# Print Metrics
print("R^2: {}".format(r_squared))
print("RMSE: {}".format(rmse))



# Import Modules
from sklearn.model_selection import KFold, cross_val_score

#Â Create KFold 
kf = KFold(n_splits=6, shuffle=True, random_state=5)

model = LinearRegression()

# Compute 6-Fold Cross-Validation Scores
cv_scores = cross_val_score(reg, X, y, cv=kf)

# Print Scores
print(cv_scores)

# Print Mean
print(np.mean(cv_results))

# Print the Standard Deviation
print(np.std(cv_results))

# Print 95% Confidence Interval
print(np.quantile(cv_results, [0.025, 0.975]))
