#Â Import LogisticRegression
from sklearn.linear_model import LogisticRegression

# Instantiate Model
model = LogisticRegression()

# Fit Model
model.fit(X_train, y_train)

# Predict probabilities
y_pred_probs = logreg.predict_proba(X_test)[:, 1]

print(y_pred_probs[:10])


  
# Import roc_curve
from sklearn.metrics import roc_curve

# Generate ROC Curve Values: fpr, tpr, thresholds
fpr, tpr, thresholds = roc_curve(y_test, y_pred_probs)

plt.plot([0, 1], [0, 1], 'k--')

# Plot tpr Against fpr
plt.plot(fpr, tpr)
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve for Diabetes Prediction')
plt.show()


  
# Import roc_auc_score
from sklearn.metrics import roc_auc_score

# Calculate roc_auc_score
print(roc_auc_score(y_test, y_pred_probs))

# Calculate Confusion Matrix
print(confusion_matrix(y_test, y_pred))

# Calculate Classification Report
print(classification_report(y_test, y_pred))


  
# Create music_dummies
music_dummies = pd.get_dummies(music_df,drop_first=True)

# Print new DataFrame's Shape
print("Shape of music_dummies: {}".format(music_dummies.shape))



# Print NA Values for Each Column
print(music_df.isna().sum().sort_values())

# Remove Values With Less Than 5% NAs
music_df = music_df.dropna(subset=["genre", "popularity", "loudness", "liveness", "tempo"])

# Convert genre to Binary
music_df["genre"] = np.where(music_df["genre"] == "Rock", 1, 0)

print(music_df.isna().sum().sort_values())
print("Shape of the `music_df`: {}".format(music_df.shape))
