# Import DecisionTreeClassifier 
from sklearn.tree import DecisionTreeClassifier

# Instantiate DecisionTreeClassifier 
dt = DecisionTreeClassifier(max_depth=6, random_state=SEED)

# Fit Model
dt.fit(X_train, y_train)

# Predict Test
y_pred = dt.predict(X_test)
print(y_pred[0:5])



# Import accuracy_score
from sklearn.metrics import accuracy_score

# Predict Test
y_pred = dt.predict(X_test)

# Compute Model Accuracy  
acc = accuracy_score(y_test, y_pred)
print("Test set accuracy: {:.2f}".format(acc))



# Import LogisticRegression from sklearn.linear_model
from sklearn.linear_model import  LogisticRegression

# Instatiate logreg
model = LogisticRegression(random_state=1)

# Fit logreg to the training set
model.fit(X_train, y_train)

# Define a list called clfs containing the two classifiers logreg and dt
clfs = [logreg, dt]

# Review the decision regions of the two classifiers
plot_labeled_decision_regions(X_test, y_test, clfs)



# Import DecisionTreeClassifier 
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Instantiate dt_entropy
dt_entropy = DecisionTreeClassifier(max_depth=8, criterion='entropy', random_state=1)

# Fit dt_entropy 
dt_entropy.fit(X_train, y_train)

# Predict dt_entropy
y_pred = dt_entropy.predict(X_test)

# Evaluate accuracy_entropy
accuracy_entropy = accuracy_score(y_test, y_pred)

# Print accuracy_entropy
print(f'Accuracy achieved by using entropy: {accuracy_entropy:.3f}')

# Print accuracy_gini
print(f'Accuracy achieved by using the gini index: {accuracy_gini:.3f}')
