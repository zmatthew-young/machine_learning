#import xgboost
import xgboost as xgb

# Create X and y
X, y = churn_data.iloc[:,:-1], churn_data.iloc[:,-1]

# Split Data
X_train,X_test,y_train,y_test= train_test_split(X, y, test_size=0.2, random_state=123)

# Instantiate XGBClassifier
xg_cl = xgb.XGBClassifier(objective='binary:logistic', n_estimators=10, seed=123)

# Fit Classifier
xg_cl.fit(X_train,y_train)

# Predictons
preds = xg_cl.predict(X_test)

# Compute Accuracy
accuracy = float(np.sum(preds==y_test))/y_test.shape[0]
print("accuracy: %f" % (accuracy))



# Import 
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)

# Model
dt_clf_4 = DecisionTreeClassifier(max_depth=4)

# Fit
dt_clf_4.fit(X_train, y_train)

# Predict 
y_pred_4 = dt_clf_4.predict(X_test)

# Accuracy
accuracy = float(np.sum(y_pred_4==y_test))/y_test.shape[0]
print("accuracy:", accuracy)



# X and y
X, y = churn_data.iloc[:,:-1], churn_data.iloc[:,-1]

# DMatrix 
churn_dmatrix = xgb.DMatrix(data=X, label=y)

# Parameter 
params = {"objective":"reg:logistic", "max_depth":3}

# Cross-Validation
cv_results = xgb.cv(dtrain=churn_dmatrix, params=params, 
                    nfold=3, num_boost_round=5, 
                    metrics="error", as_pandas=True, seed=123)

# Print cv_results
print(cv_results)

# Print the accuracy
print(((1-cv_results["test-error-mean"]).iloc[-1]))



# Split
X_train, X_test, y_train, y_test= train_test_split(X, y, test_size=0.2, random_state=123)

# XGBRegressor
xg_reg = xgb.XGBRegressor(objective="reg:linear", n_estimators=10, seed=123)

# Fit 
xg_reg.fit(X_train, y_train)

# Predict 
preds = xg_reg.predict(X_test)

# RSME
rmse = np.sqrt(mean_squared_error(y_test, preds))
print("RMSE: %f" % (rmse))

# Convert DMatrixes
DM_train = xgb.DMatrix(data=X_train, label=y_train)
DM_test =  xgb.DMatrix(data=X_test, label=y_test)

# Parameter Dictionary
params = {"booster":"gblinear", "objective":"reg:linear"}

# Train 
xg_reg = xgb.train(params = params, dtrain=DM_train, num_boost_round=5)

# Predict 
preds = xg_reg.predict(DM_test)

# RMSE
rmse = np.sqrt(mean_squared_error(y_test,preds))
print("RMSE: %f" % (rmse))
